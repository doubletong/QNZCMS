// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace QNZ.Data
{
    public partial class QNZContext : DbContext
    {
        public QNZContext()
        {
        }

        public QNZContext(DbContextOptions<QNZContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Advertisement> Advertisements { get; set; }
        public virtual DbSet<AdvertisingSpace> AdvertisingSpaces { get; set; }
        public virtual DbSet<Album> Albums { get; set; }
        public virtual DbSet<Article> Articles { get; set; }
        public virtual DbSet<ArticleCategory> ArticleCategories { get; set; }
        public virtual DbSet<Branch> Branches { get; set; }
        public virtual DbSet<Cart> Carts { get; set; }
        public virtual DbSet<CartItem> CartItems { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<District> Districts { get; set; }
        public virtual DbSet<DocCategory> DocCategories { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<Exhibition> Exhibitions { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<JobCategory> JobCategories { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<MailingAddress> MailingAddresses { get; set; }
        public virtual DbSet<Memorabilium> Memorabilia { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<MenuCategory> MenuCategories { get; set; }
        public virtual DbSet<MobileCodeSet> MobileCodeSets { get; set; }
        public virtual DbSet<Navigation> Navigations { get; set; }
        public virtual DbSet<NavigationCategory> NavigationCategories { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderComment> OrderComments { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<Organization> Organizations { get; set; }
        public virtual DbSet<Page> Pages { get; set; }
        public virtual DbSet<PageMeta> PageMetas { get; set; }
        public virtual DbSet<Photo> Photos { get; set; }
        public virtual DbSet<Post> Posts { get; set; }
        public virtual DbSet<PostCategory> PostCategories { get; set; }
        public virtual DbSet<PostTag> PostTags { get; set; }
        public virtual DbSet<PostTagesLinkPost> PostTagesLinkPosts { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductCategory> ProductCategories { get; set; }
        public virtual DbSet<Province> Provinces { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RoleMenu> RoleMenus { get; set; }
        public virtual DbSet<Shope> Shopes { get; set; }
        public virtual DbSet<SocialApp> SocialApps { get; set; }
        public virtual DbSet<Solution> Solutions { get; set; }
        public virtual DbSet<Staff> Staffs { get; set; }
        public virtual DbSet<Store> Stores { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<Video> Videos { get; set; }
        public virtual DbSet<Work> Works { get; set; }
        public virtual DbSet<Webpart> Webparts { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Advertisement>(entity =>
            {
                entity.HasOne(d => d.Space)
                    .WithMany(p => p.Advertisements)
                    .HasForeignKey(d => d.SpaceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Advertisements_AdvertisingSpaces");
            });

            modelBuilder.Entity<Album>(entity =>
            {
                entity.HasIndex(e => e.Alias)
                    .IsUnique();

                entity.Property(e => e.Active).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Article>(entity =>
            {
                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UpdatedDate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Articles)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Articles_ArticleCategories");
            });

            modelBuilder.Entity<ArticleCategory>(entity =>
            {
                entity.Property(e => e.Active).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Branch>(entity =>
            {
                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UpdatedDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<CartItem>(entity =>
            {
                entity.HasOne(d => d.Cart)
                    .WithMany(p => p.CartItems)
                    .HasForeignKey(d => d.CartId)
                    .HasConstraintName("FK_CartItemSet_CartSet");

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.CartItems)
                    .HasForeignKey(d => d.StoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CartItem_Store");
            });

            modelBuilder.Entity<City>(entity =>
            {
                entity.HasOne(d => d.Province)
                    .WithMany(p => p.Cities)
                    .HasForeignKey(d => d.ProvinceId)
                    .HasConstraintName("FK_T_City_T_Province");
            });

            modelBuilder.Entity<Client>(entity =>
            {
                entity.Property(e => e.Active).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<District>(entity =>
            {
                entity.HasOne(d => d.City)
                    .WithMany(p => p.Districts)
                    .HasForeignKey(d => d.CityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_T_District_T_City");
            });

            modelBuilder.Entity<DocCategory>(entity =>
            {
                entity.Property(e => e.Active).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Document>(entity =>
            {
                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UpdatedDate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK_Documents_DocCategories");
            });

            modelBuilder.Entity<Exhibition>(entity =>
            {
                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UpdatedDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<Job>(entity =>
            {
                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Number).HasDefaultValueSql("((1))");

                entity.Property(e => e.UpdatedDate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.Jobs)
                    .HasForeignKey(d => d.BranchId)
                    .HasConstraintName("FK_Jobs_Branches");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Jobs)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK_Jobs_JobCategories");
            });

            modelBuilder.Entity<JobCategory>(entity =>
            {
                entity.Property(e => e.Active).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<MailingAddress>(entity =>
            {
                entity.Property(e => e.Active).HasComment("是否默认");

                entity.Property(e => e.Mobile)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Memorabilium>(entity =>
            {
                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.Year).HasDefaultValueSql("((2016))");
            });

            modelBuilder.Entity<Menu>(entity =>
            {
                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Menus)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK_MenuSet_MenuCategorySet_CategoryId");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_MenuSet_MenuSet_ParentId");
            });

            modelBuilder.Entity<MobileCodeSet>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasComment("创建时间");

                entity.Property(e => e.IsUsed).HasComment("是否使用");

                entity.Property(e => e.Mobile).HasComment("手机号");

                entity.Property(e => e.ValidateCode).HasComment("验证码");
            });

            modelBuilder.Entity<Navigation>(entity =>
            {
                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Navigations)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Navigations_NavigationCategories");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Navigations_Navigations");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.Property(e => e.Amount).HasComment("优惠金额");

                entity.Property(e => e.Consignee).HasComment("收件人");

                entity.Property(e => e.CreatedDate).HasComment("购买时间");

                entity.Property(e => e.OpenId)
                    .HasDefaultValueSql("((0))")
                    .HasComment("客户ID");

                entity.Property(e => e.Remark).HasComment("备注");

                entity.Property(e => e.Status).HasComment("订单状态（0：待付款；1：待发货；2：已发货；3：待评价；4：已完成；10：已取消）");
            });

            modelBuilder.Entity<OrderComment>(entity =>
            {
                entity.Property(e => e.OrderId).ValueGeneratedNever();

                entity.HasOne(d => d.Order)
                    .WithOne(p => p.OrderComment)
                    .HasForeignKey<OrderComment>(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderComment_Order");
            });

            modelBuilder.Entity<OrderDetail>(entity =>
            {
                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderDetail_Order");

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.StoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderDetail_Store");
            });

            modelBuilder.Entity<Organization>(entity =>
            {
                entity.Property(e => e.Active).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Page>(entity =>
            {
                entity.Property(e => e.Importance)
                    .HasDefaultValueSql("((0))")
                    .HasComment("权重，值越高越排前");
            });

            modelBuilder.Entity<PageMeta>(entity =>
            {
                entity.HasKey(e => new { e.ModuleType, e.ObjectId });
            });

            modelBuilder.Entity<Photo>(entity =>
            {
                entity.HasOne(d => d.Album)
                    .WithMany(p => p.Photos)
                    .HasForeignKey(d => d.AlbumId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Photos_Albums");
            });

            modelBuilder.Entity<Post>(entity =>
            {
                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Posts)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Post_PostCategory");
            });

            modelBuilder.Entity<PostCategory>(entity =>
            {
                entity.HasIndex(e => e.Alias)
                    .HasDatabaseName("IX_PostCategory")
                    .IsUnique();

                entity.Property(e => e.Active).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<PostTag>(entity =>
            {
                entity.HasIndex(e => e.TagName)
                    .HasDatabaseName("IX_PostTags")
                    .IsUnique();

                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<PostTagesLinkPost>(entity =>
            {
                entity.HasKey(e => new { e.PostId, e.TagId });

                entity.HasOne(d => d.Post)
                    .WithMany(p => p.PostTagesLinkPosts)
                    .HasForeignKey(d => d.PostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PostTagesLinkPosts_PostTagesLinkPosts");

                entity.HasOne(d => d.Tag)
                    .WithMany(p => p.PostTagesLinkPosts)
                    .HasForeignKey(d => d.TagId)
                    .HasConstraintName("FK_PostTagesLinkPosts_PostTags");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UpdatedDate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK_Products_ProductCategories");
            });

            modelBuilder.Entity<ProductCategory>(entity =>
            {
                entity.HasIndex(e => e.Alias)
                    .IsUnique();

                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_ProductCategories_ProductCategories");
            });

            modelBuilder.Entity<RoleMenu>(entity =>
            {
                entity.HasKey(e => new { e.RoleId, e.MenuId })
                    .HasName("PK_RoleMenuSet");

                entity.HasOne(d => d.Menu)
                    .WithMany(p => p.RoleMenus)
                    .HasForeignKey(d => d.MenuId)
                    .HasConstraintName("FK_RoleMenuSet_MenuSet_MenuId");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.RoleMenus)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_RoleMenuSet_RoleSet_RoleId");
            });

            modelBuilder.Entity<Shope>(entity =>
            {
                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.IconType).HasDefaultValueSql("((1))");

                entity.Property(e => e.ToLeft).HasComment("");

                entity.Property(e => e.ToTop).HasComment("");
            });

            modelBuilder.Entity<SocialApp>(entity =>
            {
                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UpdatedDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<Solution>(entity =>
            {
                entity.Property(e => e.Active).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Staff>(entity =>
            {
                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Gender).HasDefaultValueSql("(N'男')");

                entity.Property(e => e.MasterTime).HasDefaultValueSql("(N'男')");

                entity.Property(e => e.UpdatedDate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.staff)
                    .HasForeignKey(d => d.OrganizationId)
                    .HasConstraintName("FK_Staffs_Organizations");
            });

            modelBuilder.Entity<Store>(entity =>
            {
                entity.Property(e => e.Address).HasComment("地址");

                entity.Property(e => e.City).HasComment("城市 ");

                entity.Property(e => e.Contact).HasComment("联系人");

                entity.Property(e => e.CreatedBy).HasComment("创建人");

                entity.Property(e => e.CreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("创建时间");

                entity.Property(e => e.District).HasComment("区/县");

                entity.Property(e => e.Longitude).HasComment("经度");

                entity.Property(e => e.Name).HasComment("店铺名称");

                entity.Property(e => e.Phone).HasComment("电话");

                entity.Property(e => e.Province).HasComment("省");

                entity.Property(e => e.UpdatedBy).HasComment("最后更新人");

                entity.Property(e => e.UpdatedDate).HasComment("最后更新时间");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<UserRole>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId })
                    .HasName("PK_UserRoleSet");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.UserRoles)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_UserRoleSet_RoleSet_RoleId");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserRoles)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_UserRoleSet_UserSet_UserId");
            });

            modelBuilder.Entity<Video>(entity =>
            {
                entity.Property(e => e.Cover).HasComment("手机");

                entity.Property(e => e.Description).HasComment("省");

                entity.Property(e => e.Title).HasComment("微信号");

                entity.Property(e => e.VideoUrl).HasComment("名称");
            });


            modelBuilder.Entity<Work>(entity =>
            {
                entity.Property(e => e.SolutionId).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.Works)
                    .HasForeignKey(d => d.ClientId)
                    .HasConstraintName("FK_Work_Client");

                entity.HasOne(d => d.Solution)
                    .WithMany(p => p.Works)
                    .HasForeignKey(d => d.SolutionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Work_Solution");
            });

            modelBuilder.Entity<Webpart>(entity =>
            {
                entity.Property(e => e.Importance)
                    .HasDefaultValueSql("((0))")
                    .HasComment("权重，值越高越排前");

                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}