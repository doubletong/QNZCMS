// Mixins
// Reset List
// Resets default list styling.
// @usage - `@include reset-list`
// Styleguide 10.1
@mixin reset-list {
    list-style: none;
    margin: 0;
    padding: 0;
}

// Hovers
//
// Create pseduo-classes for `:hover`, `:active`, and `:focus`.
// @usage - `@include hover`
// Styleguide 10.3
@mixin hover {
    &:hover,
    &:active,
    &:focus {
        @content;
    }
}

// Feature Detection
//
// $feature - Feature-specific class, i.e. `cssgradients`.
// @usage - `@include supported($feature)`
// @usage - `@include not-supported($feature)`
@mixin supported($feature) {
    .#{$feature} & {
        @content;
    }
}

@mixin not-supported($feature) {
    .no-js &,
    .no-#{$feature} & {
        @content;
    }
}


//
//  RESPOND ABOVE
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-above(sm) {}
@mixin respond-above($breakpoint) {

    // If the breakpoint exists in the map.
    @if map-has-key($breakpoints, $breakpoint) {
  
      // Get the breakpoint value.
      $breakpoint-value: map-get($breakpoints, $breakpoint);
  
      // Write the media query.
      @media (min-width: $breakpoint-value) {
        @content;
      }
    
    // If the breakpoint doesn't exist in the map.
    } @else {
  
      // Log a warning.
      @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
  }

//
//  RESPOND BELOW
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-below(sm) {}
@mixin respond-below($breakpoint) {

    // If the breakpoint exists in the map.
    @if map-has-key($breakpoints, $breakpoint) {
  
      // Get the breakpoint value.
      $breakpoint-value: map-get($breakpoints, $breakpoint);
  
      // Write the media query.
      @media (max-width: ($breakpoint-value - 1)) {
        @content;
      }
    
    // If the breakpoint doesn't exist in the map.
    } @else {
  
      // Log a warning.
      @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
  }
  
  
  //
  //  RESPOND BETWEEN
  //––––––––––––––––––––––––––––––––––––––––––––––––––
  
  // @include respond-between(sm, md) {}
  @mixin respond-between($lower, $upper) {
  
    // If both the lower and upper breakpoints exist in the map.
    @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
  
      // Get the lower and upper breakpoints.
      $lower-breakpoint: map-get($breakpoints, $lower);
      $upper-breakpoint: map-get($breakpoints, $upper);
  
      // Write the media query.
      @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
        @content;
      }
    
    // If one or both of the breakpoints don't exist.
    } @else {
  
      // If lower breakpoint is invalid.
      @if (map-has-key($breakpoints, $lower) == false) {
  
        // Log a warning.
        @warn 'Your lower breakpoint was invalid: #{$lower}.';
      }
  
      // If upper breakpoint is invalid.
      @if (map-has-key($breakpoints, $upper) == false) {
  
        // Log a warning.
        @warn 'Your upper breakpoint was invalid: #{$upper}.';
      }
    }
  }

// Clearfix
// Nicolas Gallagher's micro clearfix hack
// @source - http://nicolasgallagher.com/micro-clearfix-hack/
@mixin clearfix {
    &:before,
    &:after {
        content: '';
        display: table;
    }
    &:after {
        clear: both;
    }
}

// Hide Text
//
// @usage - `@include hide-text`
@mixin hide-text {
    overflow: hidden;
    text-indent: 101%;
    white-space: nowrap;
}

// Hidden
//
// Hide from both screenreaders and browsers
// @usage - `@include hidden`
@mixin hidden {
    display: none !important;
    visibility: hidden;
}

// Visually Hidden
//
// Hide only visually, but have it available for screenreaders
// @usage - `@include visuallyhidden`
@mixin visuallyhidden {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
    // Extends the .visuallyhidden class to allow the element to be focusable
    // when navigated to via the keyboard: h5bp.com/p
    &.focusable {
        &:active,
        &:focus {
            clip: auto;
            height: auto;
            margin: 0;
            overflow: visible;
            position: static;
            width: auto;
        }
    }
}

// Invisible
// Hide visually and from screenreaders, but maintain layout
// @usage - `@include invisible`
@mixin invisible {
    visibility: hidden;
}

// 字体渐变
// 字体渐变颜色
// @usage - `@include font-gradient($blue, $purple, left)`
@mixin font-gradient($from, $to, $dir) {
    background: -webkit-linear-gradient($dir, $from, $to);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
}

// 边框渐变
// @usage - `@include font-gradient($blue, $purple, left)`
@mixin border-image($from, $to, $width) {
    border-image: linear-gradient(left, $from, $to);
    border-image-slice: 1;
    border-image-width: $width;
}

// @usage - `@include border-gradient($lorange, $dorange, 2px);`
@mixin border-gradient($from, $to, $width) {
    border-left: $width solid $from;
    border-right: $width solid $to;
    background-image: // both needed for top & bottom
    linear-gradient(left, $from, $to), linear-gradient(left, $from, $to);
    // 100% left & right, $width px top & bottom
    background-size: 100% $width;
    background-position: 0 100%, 0 0;
    background-repeat: no-repeat;
    background-clip: border-box;
}

// @usage - `@include box-gradient($yellow, $teal, 1px);`
@mixin box-gradient($from, $to, $weight: 0) {
    $mix-main: mix($from, $to);
    $mix-sub-from: mix($mix-main, $from);
    $mix-sub-to: mix($mix-main, $to);
    box-shadow: // left - start color
    -1px 0 0 $weight rgba($from, .75), // top left - mix of two colors plus start
    -1px -1px 0 $weight rgba($mix-sub-from, .25), // bottom left - mix of two colors plus start
    -1px 1px 0 $weight rgba($mix-sub-from, .25), // top mid - mix of two colors
    0 -1px 0 $weight rgba($mix-main, .5), // bottom mid - mix of two colors
    0 1px 0 $weight rgba($mix-main, .5), // top right - mix of two colors plus end
    1px -1px 0 $weight rgba($mix-sub-to, .25), // bottom right - mix of two colors plus end
    1px 1px 0 $weight rgba($mix-sub-to, .25), // right - end color
    1px 0 0 $weight rgba($to, .75);
}

// @include vertical-align(); 
@mixin vertical-align($position: relative) {
    position: $position;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
}

// @include font-face('Khand', 'Khand-Regular', 'Khand', 'serif'); 
@mixin font-face($style-name, $file, $family, $category:"") {
    $filepath: "../fonts/" + $family + "/" + $file;
    @font-face {
        font-family: "#{$style-name}";
        src: url($filepath + ".eot");
        src: url($filepath + ".eot?#iefix") format('embedded-opentype'), url($filepath + ".woff") format('woff'), url($filepath + ".ttf") format('truetype'), url($filepath + ".svg#" + $style-name + "") format('svg');
    }
    %#{$style-name} {
        font: {
            @if $category !="" {
                family: "#{$style-name}",
                #{$category};
            }
            @else {
                family: "#{$style-name}";
                weight: normal;
            }
        }
    }
}